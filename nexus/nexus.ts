/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  GetMeType: { // root type
    userId?: number | null; // Int
  }
  Mutation: {};
  PostType: { // root type
    content?: string | null; // String
    createdAt?: number | null; // Float
    id?: number | null; // Int
    title?: string | null; // String
    user?: NexusGenRootTypes['UserType'] | null; // UserType
    userId?: number | null; // Int
  }
  Query: {};
  UserType: { // root type
    createdAt?: number | null; // Float
    email?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    password?: string | null; // String
    posts?: Array<NexusGenRootTypes['PostType'] | null> | null; // [PostType]
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  GetMeType: { // field return type
    userId: number | null; // Int
  }
  Mutation: { // field return type
    createPost: boolean | null; // Boolean
    deletePost: boolean | null; // Boolean
    loginUser: boolean | null; // Boolean
    logoutUser: boolean | null; // Boolean
    registerUser: boolean | null; // Boolean
  }
  PostType: { // field return type
    content: string | null; // String
    createdAt: number | null; // Float
    id: number | null; // Int
    title: string | null; // String
    user: NexusGenRootTypes['UserType'] | null; // UserType
    userId: number | null; // Int
  }
  Query: { // field return type
    getMe: NexusGenRootTypes['GetMeType'] | null; // GetMeType
    hello: string | null; // String
    posts: Array<NexusGenRootTypes['PostType'] | null> | null; // [PostType]
  }
  UserType: { // field return type
    createdAt: number | null; // Float
    email: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    password: string | null; // String
    posts: Array<NexusGenRootTypes['PostType'] | null> | null; // [PostType]
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  GetMeType: { // field return type name
    userId: 'Int'
  }
  Mutation: { // field return type name
    createPost: 'Boolean'
    deletePost: 'Boolean'
    loginUser: 'Boolean'
    logoutUser: 'Boolean'
    registerUser: 'Boolean'
  }
  PostType: { // field return type name
    content: 'String'
    createdAt: 'Float'
    id: 'Int'
    title: 'String'
    user: 'UserType'
    userId: 'Int'
  }
  Query: { // field return type name
    getMe: 'GetMeType'
    hello: 'String'
    posts: 'PostType'
  }
  UserType: { // field return type name
    createdAt: 'Float'
    email: 'String'
    id: 'Int'
    name: 'String'
    password: 'String'
    posts: 'PostType'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      content?: string | null; // String
      title?: string | null; // String
    }
    deletePost: { // args
      id?: number | null; // Int
    }
    loginUser: { // args
      password?: string | null; // String
      username?: string | null; // String
    }
    registerUser: { // args
      email?: string | null; // String
      name?: string | null; // String
      password?: string | null; // String
      username?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}